type Query {
  user(input: UserByIdInput!): User
  test: HelloWorld!
  room(input: RoomByIdInput!): Room
}

type Mutation {
  createUser(input: CreateUserInput!): User
  joinRoom(input: JoinRoomInput!): Spectator
  switchSpectatorToCollaborator(input: SpectatorIdInput!): Spectator
  switchCollaboratorToSpectator(input: SpectatorIdInput!): Spectator
  createRoom(input: CreateRoomInput!): Room
  createPrivateRoom(input: CreateRoomInput!): Room
  deleteRoom(roomId: String!): Boolean!
  createDocument(input: CreateDocumentInput!): Document
  saveDocument(input: SaveDocumentInput!): Document
}

input UserByIdInput {
  id: String!
}

input CreateUserInput {
  authId: String!
  authProvider: String!
  displayName: String
  email: String!
  profilePicture: String
}

type User {
  authId: String!
  authProvider: String!
  displayName: String
  email: String!
  id: String!
  profilePicture: String
  rooms: [Room!]
  spectators: [Spectator!]
}

type HelloWorld {
  helloWorld: String
}

input JoinRoomInput {
  userId: String
  roomId: String!
  name: String!
}

input SpectatorIdInput {
  spectatorId: String!
}

type Spectator {
  canEdit: Boolean!
  createdAt: DateTime!
  id: String!
  isGuest: Boolean!
  name: String!
}

scalar DateTime

input RoomByIdInput {
  id: String!
}

input CreateRoomInput {
  description: String
  name: String!
  ownerId: String!
}

type Room {
  createdAt: DateTime
  description: String
  document: Document
  id: String!
  isPrivate: Boolean!
  name: String!
  owner: User!
  sessionLimit: DateTime
  spectatorLimit: Int!
  spectators: [Spectator!]!
}

input CreateDocumentInput {
  language: String!
  roomId: String!
}

input SaveDocumentInput {
  documentId: String!
  content: String!
}

type Document {
  id: String!
  content: String!
  language: String!
  createdAt: DateTime
}

schema {
  query: Query
  mutation: Mutation
}