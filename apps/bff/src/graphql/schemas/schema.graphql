type Query {
  user(input: UserByIdInput!): CompleteUser
  userByProviderAndProviderId(provider: String!, providerId: String!): CompleteUser
  codingProblems(input: CodingProblemsInput): [CompleteCodingProblem]
  codingProblem(input: CodingProblemByIdInput!): CompleteCodingProblem
}

type Mutation {
  createUser(input: CreateUserInput!): User
  createTestCase(input: CreateTestCaseInput!): CompleteTestCase
  updateTestCase(input: UpdateTestCaseInput!): CompleteTestCase
  createSubmission(input: CreateSubmissionInput!): CompleteSubmission
  createSpectator(input: CreateSessionSpectatorInput!): CompleteSessionSpectator
  updateSpectator(input: UpdateSessionSpectatorInput!): CompleteSessionSpectator
  createSession(input: CreateCodingProblemSessionInput!): CompleteCodingProblemSession
  updateSession(input: UpdateCodingProblemSessionInput!): CompleteCodingProblemSession
  createCodingProblem(input: CreateCodingProblemInput!): CompleteCodingProblem
  updateCodingProblem(input: UpdateCodingProblemInput!): CompleteCodingProblem
}

input UserByIdInput {
  id: String!
}

input CreateUserInput {
  authId: String!
  authProvider: String!
  displayName: String
  email: String!
  profilePicture: String
}

type CompleteUser {
  authId: String!
  authProvider: String!
  displayName: String
  email: String!
  id: String!
  profilePicture: String
  problems: [CodingProblem]!
  submissions: [Submission]!
  sessionSpectators: [SessionSpectator]!
  session: [CodingProblemSession]!
}

type User {
  authId: String!
  authProvider: String!
  displayName: String
  email: String!
  id: String!
  profilePicture: String
  createdAt: DateTime!
}

input CreateTestCaseInput {
  input: String!
  output: String!
  problemId: String!
}

input UpdateTestCaseInput {
  testCaseId: String!
  input: String!
  output: String!
}

type CompleteTestCase {
  id: String!
  problem: CodingProblem!
  input: String!
  output: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type TestCase {
  id: String!
  problemId: String!
  input: String!
  output: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateSubmissionInput {
  userId: String!
  problemId: String!
  code: String!
  language: String!
}

type CompleteSubmission {
  id: String!
  problem: CodingProblem!
  user: User!
  code: String!
  language: String!
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Submission {
  id: String!
  problemId: String!
  userId: String!
  code: String!
  language: String!
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CreateSessionSpectatorInput {
  userId: String!
  sessionId: String!
}

input UpdateSessionSpectatorInput {
  spectatorId: String!
  mode: String!
}

type CompleteSessionSpectator {
  id: String!
  session: CodingProblemSession!
  user: User!
  createdAt: DateTime
  updatedAt: DateTime
  mode: String!
}

type SessionSpectator {
  id: String!
  sessionId: String!
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
  mode: String!
}

scalar DateTime

input CreateCodingProblemSessionInput {
  problemId: String!
  hostId: String!
}

input UpdateCodingProblemSessionInput {
  sessionId: String!
  sharedCode: String!
}

type CompleteCodingProblemSession {
  id: String!
  problem: CodingProblem!
  spectators: [SessionSpectator]!
  host: User!
  createdAt: DateTime
  updatedAt: DateTime
  sharedCode: String!
}

type CodingProblemSession {
  id: String!
  problemId: String!
  hostId: String!
  createdAt: DateTime
  updatedAt: DateTime
  sharedCode: String!
}

input CodingProblemsInput {
  pagination: Pagination!
}

input CodingProblemByIdInput {
  id: String!
}

input CreateCodingProblemInput {
  authorId: String!
  title: String!
  description: String!
  difficulty: String!
}

input UpdateCodingProblemInput {
  problemId: String!
  title: String!
  description: String!
  difficulty: String!
}

type CompleteCodingProblem {
  id: String!
  title: String!
  description: String!
  difficulty: String!
  author: User!
  createdAt: DateTime
  updatedAt: DateTime
  testCases: [TestCase]!
  submissions: [Submission]!
  sessions: [CodingProblemSession]!
}

type CodingProblem {
  id: String!
  title: String!
  description: String!
  difficulty: String!
  authorId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input Pagination {
  page: Int!
  limit: Int!
}

schema {
  query: Query
  mutation: Mutation
}