generator zod {
  provider              = "zod-prisma"
  // not quite sure what to do with this but works for now
  output                = "../../validations/schemas"
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DB_URL")
}

model User {
  id             String       @id @default(uuid())
  authProvider   String
  authId         String
  email          String       @unique
  displayName    String?
  profilePicture String?
  createdAt      DateTime     @default(now())
  problems       Problem[]    @relation("author")
  submissions    Submission[]

  SessionSpectator SessionSpectator[]
}

model Problem {
  id          String       @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  author      User         @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  testCases   TestCase[]   @relation("testCases")
  submissions Submission[] @relation("submissions")
  sessions    Session[]
}

model TestCase {
  id        String   @id @default(uuid())
  input     String
  output    String
  problemId String
  problem   Problem  @relation("testCases", fields: [problemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId String
  problem   Problem  @relation("submissions", fields: [problemId], references: [id], onDelete: Cascade)
  code      String
  language  Language
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id         String             @id @default(uuid())
  problemId  String
  problem    Problem            @relation(fields: [problemId], references: [id], onDelete: Cascade)
  spectators SessionSpectator[]
  host       String
  sharedCode String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model SessionSpectator {
  id        String   @id @default(uuid())
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mode      Mode     @default(SPECTATOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Mode {
  SPECTATOR
  COLLABORATOR
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Language {
  JAVASCRIPT
}

enum Status {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}
