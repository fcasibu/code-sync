generator zod {
  provider              = "zod-prisma"
  // not quite sure what to do with this but works for now
  output                = "../../validations/schemas"
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DB_URL")
}

model User {
  id             String    @id @default(uuid())
  authProvider   String
  authId         String
  email          String    @unique
  displayName    String?
  profilePicture String?
  createdAt      DateTime? @default(now())

  rooms      Room[]
  spectators Spectator[]
}

model Room {
  id             String      @id @default(uuid())
  name           String
  description    String?
  isPrivate      Boolean     @default(false)
  sessionLimit   DateTime?
  spectatorLimit Int         @default(20)
  owner          User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  spectators     Spectator[]
  createdAt      DateTime?   @default(now())
  document       Document?
}

// TODO: rename and should be able to handle file structure
model Document {
  id        String    @id @default(uuid())
  content   String
  language  Language
  createdAt DateTime? @default(now())
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String    @unique
}

model Spectator {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  name      String
  isGuest   Boolean  @default(true)
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Language {
  TYPESCRIPT
}
